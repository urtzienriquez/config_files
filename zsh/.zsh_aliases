# ls aliases
alias ls='ls -F --color=auto'
alias ll='ls -lhA'
alias la='ls -hA'

# enable/disable keyd
alias kdon="sudo systemctl enable --now keyd "
alias kdoff="sudo systemctl disable --now keyd "

# change keyboard layout
alias kles="setxkbmap es"
alias klus="setxkbmap us"
alias klq="setxkbmap -query"

# dir aliases
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'

# grep aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
    
# matlab package manager
alias mpm="/opt/mpm"

# neovim alias
alias nv='nvim'

# lazygit alias
alias lg='lazygit'

# R
alias r='radian'

# python
alias py='python3'

# julia
alias jl='julia'

# # qstat alias for metacentrum
# alias qs='ssh meta qstat -u urtzien'
# alias qs2='ssh perian qstat -u urtzien'

# image viewer
alias iv='imv-x11'

# alias for ranger 
alias rn='ranger'

# alias for bat
alias bt='bat -p'

#calcurse
alias cl='clear'

# fzf 
		
# ff: find files in given path (or current directory), open appropriately
ff() {
  local search_path="${1:-.}"
  local ofile
  ofile=$(find "$search_path" \
    \( -path "$search_path/node_modules" -o -path '*/.git' -o -path "$HOME/go" \) -prune -o \
    -type f -print | \
    fzf --preview 'bat -p --color=always {} 2>/dev/null') || return

  local mime
  mime=$(file -b --mime-type "$ofile")

  if [[ $mime == text/html ]]; then
    qutebrowser --qt-arg class web --qt-arg name web "$ofile" &
  elif [[ $mime == text/* || $mime == application/javascript ]]; then
    nvim "$ofile"
  elif [[ -x "$ofile" ]]; then
    gio open "$ofile"
  elif [[ $mime == video/* ]]; then
    mpv "$ofile"
  else
    gio open "$ofile"
  fi
}

alias fh="ff ~"

# fd: find file or dir in $HOME (or given path), and cd appropriately
fd() {
  local search_path="${1:-$HOME}"
  local selected
  selected=$(find "$search_path" \
    \( -path "$search_path/node_modules" -o -path '*/.git' -o -path "$HOME/go" \) -prune -o \
    \( -type f -o -type d \) -print | \
    fzf --preview 'bat -p --color=always {} 2>/dev/null') || return

  if [[ -d "$selected" ]]; then
    cd "$selected"
  else
    cd "$(dirname "$selected")"
  fi
}

# ffr: like ff but searches the whole system with locate
ffr() {
  local file
  file=$(locate / | while read -r f; do [[ -f "$f" ]] && echo "$f"; done | \
    fzf --preview 'bat -p --color=always {} 2>/dev/null') || return

  local mime
  mime=$(file -b --mime-type "$file")

  if [[ $mime == text/html ]]; then
    qutebrowser --qt-arg class web --qt-arg name web "$file" &
  elif [[ $mime == text/* || $mime == application/javascript ]]; then
    nvim "$file"
  elif [[ -x "$file" ]]; then
    gio open "$file"
  elif [[ $mime == video/* ]]; then
    mpv "$file"
  else
    gio open "$file"
  fi
}

# fdr: like fd but searches entire system using locate, and cd accordingly
fdr() {
  local file
  file=$(locate / | fzf --preview 'bat -p --color=always {} 2>/dev/null') || return

  if [[ -d "$file" ]]; then
    cd "$file"
  else
    cd "$(dirname "$file")"
  fi
}

tm() {
	  tty_id=$(basename "$(tty)")
	  session="term_${tty_id}"
	  tmux new-session -A -s "$session"
}

alias tmu="~/.config/tmux/plugins/tpm/bin/update_plugins all"
alias tmi="~/.config/tmux/plugins/tpm/bin/install_plugins"
