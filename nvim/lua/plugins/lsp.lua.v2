-- Neovim LSP configuration using the new API (Neovim 0.10+)
-- This file explicitly defines and starts LSP servers without relying on lspconfig.setup()

-- -------------------------------------------------------------------
-- Ensure the configs table exists
-- -------------------------------------------------------------------
vim.lsp.configs = vim.lsp.configs or {}

-- -------------------------------------------------------------------
-- Default LSP capabilities (integrates with nvim-cmp)
-- -------------------------------------------------------------------
local default_opts = {
  capabilities = require("cmp_nvim_lsp").default_capabilities(),
}

-- -------------------------------------------------------------------
-- Helper: Define a config if it hasn't been created yet
-- -------------------------------------------------------------------
local function ensure_config(name, config)
  if not vim.lsp.configs[name] then
    vim.lsp.configs[name] = config
  end
end

-- -------------------------------------------------------------------
-- Language server configurations
-- -------------------------------------------------------------------
local servers = {
  -- Go
  gopls = vim.tbl_extend("force", default_opts, {
    cmd = { "gopls" },
    filetypes = { "go", "gomod", "gowork", "gotmpl" },
    root_markers = { "go.mod", ".git" },
  }),

  -- R
  r_language_server = vim.tbl_extend("force", default_opts, {
    cmd = { "R", "--slave", "-e", "languageserver::run()" },
    filetypes = { "r", "rmd" },
  }),

  -- Python
  pyright = vim.tbl_extend("force", default_opts, {
    cmd = { "pyright-langserver", "--stdio" },
    filetypes = { "python" },
    root_markers = { "pyproject.toml", "setup.py", "setup.cfg", "requirements.txt", ".git" },
  }),

  -- JavaScript / TypeScript
  ts_ls = vim.tbl_extend("force", default_opts, {
    cmd = { "typescript-language-server", "--stdio" },
    filetypes = { "javascript", "javascriptreact", "typescript", "typescriptreact" },
    -- Run LSP in any directory
    root_dir = function()
      return vim.loop.cwd()
    end,
  }),

  -- Julia
  julials = vim.tbl_extend("force", default_opts, {
    cmd = { "julia", "--startup-file=no", "--history-file=no", "-e", [[
      using LanguageServer;
      server = LanguageServer.LanguageServerInstance(stdin, stdout, "");
      server.runlinter = true;
      run(server);
    ]] },
    filetypes = { "julia" },
    root_dir = function(fname)
      local util = require("vim.lsp.util")
      return util.root_pattern("Project.toml")(fname)
        or util.find_git_ancestor(fname)
        or util.path.dirname(fname)
    end,
    on_new_config = function(new_config, _)
      local julia_bin = vim.fn.expand("~/.julia/environments/nvim-lspconfig/bin/julia")
      local path = require("vim.lsp.util").path
      if path.is_file(julia_bin) then
        new_config.cmd[1] = julia_bin
      end
    end,
    on_attach = function(_, bufnr)
      -- Disable Julia's default formatting behavior
      vim.bo[bufnr].formatexpr = ""
    end,
  }),

  -- Fortran
  fortls = vim.tbl_extend("force", default_opts, {
    cmd = {
      "fortls",
      "--lowercase_intrinsics",
      "--notify_init",
      "--hover_signature",
      "--hover_language=fortran",
      "--use_signature_help",
      "--symbol_skip_mem",
      "--autocomplete_no_prefix",
      "--autocomplete_name_only",
      "--variable_hover",
    },
    filetypes = { "fortran" },
    root_markers = { ".git" },
  }),

  -- Lua (for Neovim config development)
  lua_ls = vim.tbl_extend("force", default_opts, {
    cmd = { "lua-language-server" },
    filetypes = { "lua" },
    settings = {
      Lua = {
        runtime = { version = "LuaJIT" },
        diagnostics = { globals = { "vim" } },
        workspace = {
          checkThirdParty = false,
          library = vim.api.nvim_get_runtime_file("", true),
        },
        telemetry = { enable = false },
      },
    },
  }),
}

-- -------------------------------------------------------------------
-- Setup function to register and start LSPs dynamically
-- -------------------------------------------------------------------
local function configure_lsp()
  for name, opts in pairs(servers) do
    -- Register the server if not already registered
    ensure_config(name, {
      default_config = opts,
    })

    -- Start the server when opening a matching filetype
    vim.api.nvim_create_autocmd("FileType", {
      pattern = opts.filetypes,
      callback = function()
        vim.lsp.start(vim.lsp.configs[name].default_config)
      end,
    })
  end
end

-- -------------------------------------------------------------------
-- Plugin spec for lazy.nvim
-- -------------------------------------------------------------------
return {
  "neovim/nvim-lspconfig",
  config = configure_lsp,
}

