-- Ensure vim.lsp.configs exists
vim.lsp.configs = vim.lsp.configs or {}

-- Absolute path to Julia executable
local julia_path = "julia" -- Run `which julia` and put the result here if needed

vim.lsp.configs.julials = {
  default_config = {
    cmd = { "julia", "--startup-file=no", "--history-file=no", "-e", [[
      using LanguageServer;
      server = LanguageServer.LanguageServerInstance(stdin, stdout, "");
      server.runlinter = true;
      run(server);
    ]] },
    filetypes = { "julia" },
    root_dir = function(fname)
      local util = require("vim.lsp.util")
      return util.root_pattern("Project.toml")(fname)
        or util.find_git_ancestor(fname)
        or util.path.dirname(fname)
    end,
    on_new_config = function(new_config, _)
      local julia_bin = vim.fn.expand("~/.julia/environments/nvim-lspconfig/bin/julia")
      local path = require("vim.lsp.util").path
      if path.is_file(julia_bin) then
        new_config.cmd[1] = julia_bin
      end
    end,
    on_attach = function(client, bufnr)
      -- Disable Julia's formatting if desired
      vim.bo[bufnr].formatexpr = ""

      -- Enable diagnostics for this buffer
      vim.diagnostic.enable(bufnr)

      -- Optional: set up completion and keymaps
      vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
      local opts = { noremap=true, silent=true, buffer=bufnr }
      vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
      vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
    end,
    vim.lsp.enable("julials")
  },
}

--
-- -- Autostart when opening a Julia file
-- vim.api.nvim_create_autocmd("FileType", {
--   pattern = "julia",
--   callback = function()
--     print("Starting Julia LSP...") -- Debug message
--     vim.lsp.start(vim.lsp.configs.julials.default_config)
--   end,
-- })
--
-- -------------------------------------------------------------------
-- Plugin spec for lazy.nvim
-- -------------------------------------------------------------------
return {
  "neovim/nvim-lspconfig",
  config = configure_lsp,
}

